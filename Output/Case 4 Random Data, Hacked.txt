Initializing SENDER and RECEIVER


       |Run Cryptography --------
       |RSA{p=61717, q=40819, n=2519226223, z=2519123688, e=241, d=595809337}
        Initialized SENDER: |Sender {name=Amy, msg=null, ks=null, hashBase=null, pubKey=[2519226223, 241], privateKey=[2519226223, 595809337]}


       |Run Cryptography --------
       |RSA{p=56093, q=62467, n=3503961431, z=3503842872, e=149, d=2633761085}
        Initialized RECEIVER: |Receiver {name=Bob, msg=null, ks=null, hashBase=null, pubKey=[3503961431, 149], privateKey=[3503961431, 2633761085]}


CASE 4: Random Data WITH Hack
        Sender status: |Sender {name=Amy, msg=418, ks=351, hashBase=275, pubKey=[2519226223, 241], privateKey=[2519226223, 595809337]}
        Receiver status: |Receiver {name=Bob, msg=null, ks=null, hashBase=275, pubKey=[3503961431, 149], privateKey=[3503961431, 2633761085]}
++++++++++++++++++++++++++++++++++++++++


Start of Sender Operations


++++++++++++++++++++++++++++++++++++++++
----------------------------------------


| SecMsgProtocol (SSL) is READY to serve |


----------------------------------------


---Step 1: Sender generates message: m = 418


---Step 2: Sender hashes message: H(m) = 143


---Step 3: Sign H(m) with sender's private key and generate digital signature:
Ka-(H(m)) = 123098461


---Step 4: Generate a session key: Ks = 351


---Step 5: encrypt Ks with receiver's public key using RSA algorithm:
Kb+(Ks) = 2645764723
>>>Set packet encryptedKs to 2645764723


---Step 6: encrypt message m with session key and symmetric algorithm:
Ks(m) = 769
>>>Set packet cipher to 769


---Step 7: encrypt sender's digital signature Ka-(H(m)) using session key (ks) and symmetric algorithm
Ks(Ka-(H(m))) = 123098812
>>>Set packet encrypted digital signature to 123098812


---Step 8: the packet to be sent on to Internet is:
Packet:
        Cipher 'Ks(m)' = 769
        Digital Signature 'Ks(Ka-(H(m)))' = 123098812
        Encrypted Ks 'Kb+(Ks)' = 2645764723


++++++++++++++++++++++++++++++++++++++++


End of Sender Operations


++++++++++++++++++++++++++++++++++++++++


==> Sender sends packet to Network:
Packet:
        Cipher 'Ks(m)' = 769
        Digital Signature 'Ks(Ka-(H(m)))' = 123098812
        Encrypted Ks 'Kb+(Ks)' = 2645764723






|     START of the Internet       |
|                                 |
|                                 |
     packet in transmission  
|                                 |
|                                 |
XXXXX   packet gets hacked   XXXXXX
|                                 |
|                                 |
       packet arrives        
|                                 |
|                                 |
|     END of the Internet         |




++++++++++++++++++++++++++++++++++++++++


Start of Receiver Operations


++++++++++++++++++++++++++++++++++++++++
----------------------------------------


| SecMsgProtocol (SSL) is READY to serve |


----------------------------------------


--Step 1: Receive the packet from internet rcvPacket


--Step 2: Split the Packet
pk.cipher 'Ks(m)' = 779
pk.digitalSignature 'Ks(Ka-(H(m)))' = 123098812
pk.encryptedKs 'Kb(Ks)' = 2645764723


---Step 3: Decrypt Kb+(Ks) with Receiver's private key 'Kb-'
Receiver: the encryptedKs 'Kb+(Ks)' is: 2645764723
After decrypting with receiver's privateky 'Kb-', get Ks = 351


--Step 4: decrypt pk.cipher, i.e., 'Ks(m)' using Ks which is gotten from step 3: 779
After decryption receiver gets messgae 'm' = 428


--Step 5: Decrypt Ks(Ka-(H(m)))' with 'Ks' gotten from step 3, Ks(Ka-(H(m))) = 123098812
and get the digital signature 'Ka-(H(m))' = 123098461


--Step 6: Decrypt 'Ka-(H(m))' from sender's public key 'Ka+()'
The decrypted message digest 'H(m)' = Ka+(Ka-(H(m))) = 143


--Step 7: Hash message m from step 4 'm' = 428
The hash result H(m) = 153


---Step 8: Compare results from step 6 and step 7, if they match then accept otherwise discards


The packet did not pass the integrity checking and is not accepted!


++++++++++++++++++++++++++++++++++++++++


End of Receiver Operations


++++++++++++++++++++++++++++++++++++++++
bash-3.2$